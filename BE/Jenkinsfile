pipeline {
    agent any
    environment {
        DOCKER = 'sudo docker'
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('Build image') {
            parallel {
                stage('build-discovery') {
                    when {
                        anyOf {
                            changeset "BE/discovery-service/**/*"
                        }
                    }
                    steps {
                        sh 'ls -al'
                        dir('BE/discovery-service'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t rink645/timecapsule-discovery .'
                        }
                        echo 'Build timecapsule-discovery image...'
                    }
                }
                stage('build-apigateway') {
                    when {
                        anyOf {
                            changeset "BE/apigateway-service/**/*"
                        }
                    }
                    steps {
                        sh 'ls -al'
                        dir('BE/apigateway-service'){
                            sh 'ls -al'
                            sh 'chmod +x ./gradlew'
                            sh './gradlew build'
                            sh 'docker build -t rink645/timecapsule-apigateway .'
                        }
                        echo 'Build timecapsule-apigateway image...'
                    }
                }
            }
        }

        stage('Remove Previous image') {
            parallel {
                stage('remove-discovery') {
                    when {
                        anyOf {
                            changeset "BE/discovery-services/**/*"
                        }
                    }
                    steps {
                        script {
                            try {
                                sh 'docker stop timecapsule-discovery'
                                sh 'docker rm timecapsule-discovery'
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }
                    }
                }
                stage('remove-apigateway') {
                    when {
                        anyOf {
                            changeset "BE/apigateway-service/**/*"
                        }
                    }
                    steps {
                        script {
                            try {
                                sh 'docker stop timecapsule-apigateway'
                                sh 'docker rm timecapsule-apigateway'
                            } catch (e) {
                                echo 'fail to stop and remove container'
                            }
                        }
                    }
                }
            }
        }
        stage('Run New image') {
            parallel {
                stage('run-discovery') {
                    when {
                        anyOf {
                            changeset "BE/discovery-service/**/*"
                        }
                    }
                    steps {
                        sh 'docker run --name timecapsule-discovery -d -p 8761:8761 rink645/timecapsule-discovery'
                        echo 'Run New discovery image'
                    }
                }
                stage('run-apigateway') {
                    when {
                        anyOf {
                            changeset "BE/apigateway-service/**/*"
                        }
                    }
                    steps {
                        sh 'docker run --name timecapsule-apigateway -d -p 8000:8000 rink645/timecapsule-apigateway'
                        echo 'Run New apigateway image'
                    }
                }
            }
        }
    }
}